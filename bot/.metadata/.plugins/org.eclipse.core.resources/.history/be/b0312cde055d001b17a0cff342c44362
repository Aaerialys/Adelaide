package bot;

import java.io.Serializable;
import java.util.Arrays;
import org.json.simple.JSONObject;

public class Problem implements Comparable<Problem>,Serializable{//contains information about a problem
	private static final long serialVersionUID = -5704718188359731980L;//autogenerated for storage as a file
	private static final int[][] DMOJ_VS_CF= {{1,3,4,5,7,10,12,15,17,20,25,30,35,40,50},//an array containing the point difficuties of dmoj problems and their corresponding codeforces ratings
			{50,300,600,1000,1300,1600,1900,2150,2350,2650,3050,3300,3400,3700,3800}};
	private String link,platform,title;	//the link, platform, and title of the problem
	private int difficulty;	//the difficulty of the problem, in terms of points for dmoj problems and rating for codeforces problems
	public Problem(String link){//constructs a new problem from its link
		this.link=new String(link);
		difficulty=0;
		title=null;
		if(link.startsWith("https://codeforces")) {
			platform="codeforces";
			try {
				JSONObject info=DmojCfApi.cfProblemInfo(Integer.parseInt(link.substring(0,link.lastIndexOf('/')).replaceAll("[^\\d]", "")),link.substring(link.lastIndexOf('/')+1));
				if(info==null) return;
				title=(String) info.get("name");
				if(info.containsKey("rating")) difficulty=((Long) info.get("rating")).intValue(); //needed because of java bug
			} catch(Exception e) {
	        	System.err.println("Problem could not be found on codeforces: "+link);
				e.printStackTrace();
			}
		}
		else if(link.startsWith("https://dmoj.ca/problem/")) {
			platform="dmoj";
			try {
				JSONObject info=DmojCfApi.dmojProblemInfo(link.substring(link.lastIndexOf('/')+1));
				if(info==null) return;
				title=(String) info.get("name");
				difficulty=((Double) info.get("points")).intValue(); //needed because of a java bug
			} catch (Exception e) {
	        	System.err.println("Problem could not be found on dmoj"+link);
				e.printStackTrace();
			}
		}
		else platform="other";
	}
	public String getLink() {
		return link;
	}
	public String getPlatform() {
		return platform;
	}
	public int getDifficulty() {
		return difficulty;
	}
	public static int dmojToCf(int val) {
		return DMOJ_VS_CF[1][Math.max(0,Arrays.binarySearch(DMOJ_VS_CF[0],val))];
	}
	public String toString() {
		String ret="";
		if(title==null) ret+="<"+link+">";
		else ret+=title;
		ret+=" ["+platform+"]";
		return ret;
	}
	public String toStringEmbed() {
		String ret="";
		if(title==null) ret+="<"+link+">";
		else ret+="["+title+"]("+link+")";
		ret+=" ["+platform+"]";
		return ret;
	}
	public int compareTo(Problem p) {
		int a=difficulty,b=p.getDifficulty();
		if(platform.equals("dmoj")) a=dmojToCf(a);
		if(p.getPlatform().equals("dmoj")) b=dmojToCf(b);
		return a-b;
	}
}